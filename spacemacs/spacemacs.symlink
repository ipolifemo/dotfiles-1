;; -*- mode: emacs-lisp -*-
(defun dotspacemacs/layers ()
  (setq-default
   dotspacemacs-distribution 'spacemacs
   dotspacemacs-enable-lazy-installation 'unused
   dotspacemacs-ask-for-lazy-installation t
   dotspacemacs-configuration-layer-path '()
   dotspacemacs-configuration-layers
   '(
     helm
     (auto-completion
      :variables
      auto-completion-tab-key-behavior 'complete)
     better-defaults
     emacs-lisp
     git
     markdown
     vimscript
     yaml
     javascript
     react
     typescript
     treemacs
     org
     purescript
     haskell
     shell
     syntax-checking
     version-control
     html
     )
   dotspacemacs-additional-packages
   '(prettier-js
     fzf
     )
   dotspacemacs-frozen-packages '()
   dotspacemacs-excluded-packages '()
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  (setq-default
   dotspacemacs-elpa-https t
   dotspacemacs-elpa-timeout 5
   dotspacemacs-use-spacelpa nil
   dotspacemacs-verify-spacelpa-archives nil
   dotspacemacs-elpa-subdirectory 'emacs-version
   dotspacemacs-editing-style 'vim
   dotspacemacs-verbose-loading nil
   dotspacemacs-startup-banner 'official
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))
   dotspacemacs-startup-buffer-responsive t
   dotspacemacs-scratch-mode 'text-mode
   dotspacemacs-themes '(material
                         material-light
                         spacemacs-dark
                         spacemacs-light
                         solarized-light
                         solarized-dark)
   dotspacemacs-mode-line-theme 'spacemacs
   dotspacemacs-colorize-cursor-according-to-state t
   dotspacemacs-default-font '("Ubuntu Mono"
                               :size 16
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   dotspacemacs-leader-key "SPC"
   dotspacemacs-emacs-command-key "SPC"
   dotspacemacs-ex-command-key ":"
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-major-mode-leader-key ","
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   dotspacemacs-remap-Y-to-y$ t
   dotspacemacs-auto-save-file-location 'cache
   dotspacemacs-helm-resize nil
   dotspacemacs-helm-no-header nil
   dotspacemacs-helm-position 'bottom
   dotspacemacs-which-key-delay 0.4
   dotspacemacs-which-key-position 'bottom
   dotspacemacs-loading-progress-bar nil
   dotspacemacs-fullscreen-at-startup nil
   dotspacemacs-fullscreen-use-non-native nil
   dotspacemacs-maximized-at-startup t
   dotspacemacs-active-transparency 90
   dotspacemacs-inactive-transparency 90
   dotspacemacs-smooth-scrolling nil
   dotspacemacs-folding-method 'evil
   dotspacemacs-smartparens-strict-mode nil
   dotspacemacs-smart-closing-parenthesis nil
   dotspacemacs-highlight-delimiters 'all
   dotspacemacs-persistent-server nil
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   dotspacemacs-default-package-repository nil

   ;; NUMBERS like CALL OF DUTY
   dotspacemacs-line-numbers t
   ))

(defun dotspacemacs/user-init ()
  ;; maybe these aren't that helpful, dunno
  ;; (push '("melpa-stable" . "stable.melpa.org/packages/") configuration-layer--elpa-archives)
  ;; (push '(helm . "melpa-stable") package-pinned-packages)
  )

(defun dotspacemacs/user-config ()
  (setq-default dotspacemacs-default-font '("Ubuntu Mono"
                                            :size 20
                                            :weight normal
                                            :width normal
                                            :powerline-scale 1.1))
  ;; ;; load some local config
  (when (file-exists-p "~/.user-config.el")
    (load-file "~/.user-config.el"))

  ;; rebind spc / and *
  (evil-leader/set-key "/" 'spacemacs/helm-project-do-ag)
  (evil-leader/set-key "*" 'spacemacs/helm-project-do-ag-region-or-symbol)
  (setq helm-ag-base-command "rg --vimgrep --no-heading --smart-case")

  ;; use fzf-projectile sometimes
  (evil-leader/set-key "pz" 'fzf-projectile)

  ;; no more hl line
  (global-hl-line-mode -1)

  ;; guess im using this or something dunno
  (setq org-agenda-files
        '("~/Code/notes/notes.org"
          "~/Code/notes/work.org"
          ))

  ;; some purescript ide config
  (custom-set-variables
   '(psc-ide-source-globs
     (quote
      ("src/**/*.purs" "bower_components/purescript-*/src/**/*.purs" ".psc-package/*/*/*/src/**/*.purs"))))

  ;; yolo
  (global-company-mode)

  ;; what kind fo weirdo uses the normal one
  ;; use some company complete
  (global-set-key (kbd "C-SPC") 'company-complete)
  (define-key evil-insert-state-map (kbd "<tab>") 'company-complete-common)

  ;; Why doesn't this work by default?
  (global-set-key (kbd "C-i") 'evil-jump-forward)

  ;; jesus christ delay popups are annoying
  (setq company-idle-delay 'nil)

  ;; i wish this were two separate commands
  (setq-default git-magit-status-fullscreen t)

  ;; jumalauta who thought this is helpful
  (fset 'evil-visual-update-x-selection 'ignore)

  ;; ;; set the actual freakin font size
  ;; (set-face-attribute 'default nil :height 150)

  ;; no powerline freaking separator
  (setq powerline-default-separator 'nil)

  ;; make ; do :
  (define-key evil-normal-state-map (kbd ";") 'evil-ex)

  ;; make Q do @q
  (define-key evil-normal-state-map (kbd "Q") 'evil-execute-macro)

  ;; escape key sequence
  (setq-default evil-escape-key-sequence "kj")

  ;; wtf who doesn't use 2-space JS indent
  (setq-default
   ;; js2-mode
   js2-basic-offset 2
   ;; web-mode
   css-indent-offset 2
   web-mode-markup-indent-offset 2
   web-mode-css-indent-offset 2
   web-mode-code-indent-offset 2
   web-mode-attr-indent-offset 2)
  (setq-default js-indent-level 2)
  (setq typescript-indent-level 2)
  (setq typescript-expr-indent-offset 2)

  (setq c-default-style "java")
  (setq-default c-basic-offset 2)

  ;; god damn it tide
  (setq tide-format-options
        '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions
          t
          :placeOpenBraceOnNewLineForFunctions nil
          :indentSize 2
          :tabSize 2))

  ;; turn on fuckin typescript mode
  (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescript-mode))
  ;; use prettier
  ;; let's not turn this on by default?
  ;; (add-hook 'typescript-mode-hook 'prettier-js-mode)
  (evil-leader/set-key "mpm" 'prettier-js-mode)
  (evil-leader/set-key "mpp" 'prettier-js)
  (add-hook 'scss-mode-hook 'prettier-js-mode)

  ;; holy fucking hell package rot
  (setq ghc-report-errors nil)

  ;; handlebars is web mode?
  (add-to-list 'auto-mode-alist '("\\.foo\\'" . foo-mode))

  ;; web mode for shit
  (add-to-list 'auto-mode-alist '("\\.hbs?\\'" . web-mode))
)
(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (web-mode paradox orgit nameless mwim intero helm-swoop dumb-jump counsel-projectile counsel ivy helm helm-core magit magit-popup ghub with-editor company simple-httpd flycheck org-plus-contrib yasnippet-snippets yaml-mode xterm-color ws-butler winum which-key web-beautify volatile-highlights vimrc-mode vi-tilde-fringe uuidgen use-package unfill treemacs-projectile treemacs-evil toc-org tide tagedit symon swiper string-inflection spinner spaceline-all-the-icons solarized-theme smeargle slim-mode shell-pop scss-mode sass-mode restart-emacs rainbow-delimiters pug-mode psci psc-ide prettier-js popwin persp-mode pcre2el password-generator overseer org-projectile org-present org-pomodoro org-mime org-download org-bullets org-brain open-junk-file multi-term move-text mmm-mode material-theme markdown-toc magit-gitflow macrostep lorem-ipsum livid-mode linum-relative link-hint less-css-mode json-mode js2-refactor js-doc indent-guide impatient-mode hungry-delete hlint-refactor hl-todo hindent highlight-parentheses highlight-numbers highlight-indentation helm-xref helm-themes helm-purpose helm-projectile helm-mode-manager helm-make helm-hoogle helm-gitignore helm-flx helm-descbinds helm-css-scss helm-company helm-c-yasnippet helm-ag haskell-snippets google-translate golden-ratio gnuplot gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe git-gutter-fringe+ gh-md fzf fuzzy font-lock+ flycheck-pos-tip flycheck-haskell flx-ido fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-org evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-magit evil-lisp-state evil-lion evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-ediff evil-cleverparens evil-args evil-anzu eval-sexp-fu eshell-z eshell-prompt-extras esh-help emmet-mode elisp-slime-nav editorconfig diminish diff-hl define-word dante dactyl-mode company-web company-tern company-statistics company-ghci company-ghc company-cabal column-enforce-mode coffee-mode cmm-mode clean-aindent-mode centered-cursor-mode browse-at-remote auto-yasnippet auto-highlight-symbol auto-compile aggressive-indent adaptive-wrap ace-link ace-jump-helm-line ac-ispell))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
)
